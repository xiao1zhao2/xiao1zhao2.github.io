<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux操作系统使用--6文件系统]]></title>
    <url>%2F2017%2F10%2F29%2FLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8--6%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[本篇文章主要围绕linux文件系统总结相关知识点，包括文件系统类型、分区与挂载等基本概念以及文件系统重要目录分析。最后简要叙述文件系统体系结构中起重要作用的虚拟文件系统概念，以作后期扩展学习。 文件系统简介文件系统概念 文件系统是一种管理和访问磁盘的软件机制。用于组织和管理计算机存储设备上的大量文件，并提供用户交互接口。 文件系统是linux操作系统的重要组成部分。在linux操作系统中，“一切皆文件”。因此硬件设备也是一种特殊的文件，它挂载在某一目录下被使用。我们需掌握体会linux文件系统与windows文件系统的不同之处。 文件系统类型常见的linux文件系统有以下几种： 磁盘文件类型本地主机可以访问的文件系统，包括硬盘、CD-ROM、DVD、USB、磁盘阵列等。文件系统格式有：Ext3、Ext4、vfat、FAT32、FAT16、NTFS等。 网络文件系统远程可访问的文件系统，在服务器端仍然是本地的磁盘文件系统。文件格式有：NFS、Samba、AFP、WebDAV等。 专有/虚拟文件系统不驻留磁盘的文件系统，即为操作系统加载才产生。文件格式有：TMPFS（临时文件系统）、PROCFS（进程文件系统）、LOOPBACKFS（回送文件系统）。 注：1. 使用du -aTh命令可以看到各文件系统的使用情况和类型。2. 对比Windows系统，文件系统格式主要为NTFS、FAT16、FAT32。 分区与挂载分区 硬盘分区是针对硬件进行操作，分为主分区、扩展分区、逻辑分区。 交换分区：将内存中的内容写入磁盘或者从磁盘中读出，称为内存交换。交换分区的大小最小为计算机内存。需要把交换分区放在硬盘驱动器的起始位置。 挂载 挂载是指将分区和目录对应的过程。将一个文件系统和一个存储设备关联起来。挂载点是指文件树中的挂载目录。 linux下分区与目录的关系 Linux每一个分区都和某一个目录对应，对目录的操作就是对分区的操作，从而实现了硬件管理手段和软件目录管理手段的统一。 在Linux下，查找某个文件，不需要知道其物理存储位置，只需要知道属于哪一个目录即可。 在Windows下，目录属于分区，而在Linux下，分区属于目录。 Linux文件系统和Windows文件系统区别如下图所示。 注:1. 分区的概念可以结合安装linux操作系统的操作进一步加深理解。2. 参考文档：《嵌入式操作系统(Linux篇)》1.5.1 根文件系统目录结构根文件系统定义：存放运行、维护系统所必须的各种工具软件、库文件、脚本、配置文件和其他特殊文件的地方，也可以安装各种软件包，其实就是目录和文件。 文件类型linux系统下文件不是以后缀名不同来区分不同的文件。linux操作系统下有7种文件类型。 b 块设备文件 c 字符设备文件 d 目录文件 - 普通文件 l 链接文件 s 套结字文件 p 管道文件 说明 用ls -l命令可以看到前10个字符表示文件类型和访问权限。访问权限包括读r、写w、执行x。访问权限又分为3个不同用户级别：文件所有者、文件从属组、其他用户。 使用chmod可使用符号标记或者八进制数两种方式改变文件访问权限。如chmod u+r xxx或者chmod 777 xxx。使用符号标记方式改变，可指定多个用户级别，用逗号隔开。 目录分析Linux文件系统就是一个树形的分层组织结构，类似于一棵倒置的树。将根（/）作为文件系统的唯一起点，其他文件和外部设备都以文件的形式挂载在这个文件树上。每一个linux操作系统的文件系统不完全一样，这里以Ubuntu为例，只介绍重要的几个目录。 /bin 普通用户可以使用的命令存放地，类似的有/usr/bin、/usr/local/bin。 /sbin 超级用户可以使用的命令存放地，类似的有/usr/sbin、/usr/local/sbin。 /dev 存放所有设备文件，包括硬盘、键盘、鼠标、网卡、终端等。 /etc 存放系统配置文件。 /home 普通用户家目录。 /root 超级用户家目录。 /lib 存放共享库文件，包括被/bin、/sbin程序使用的库文件，类似的有/usr/lib、/usr/local/lib。 /media Ubuntu系统自动挂载CD-ROM、USB等，存放临时读入的文件。 /mnt 作为临时被挂载文件系统的挂载点。 /opt 作为可选文件和程序的存放目录，通常第三方软件和通过源码安装的软件，可安装于该目录。 /proc 存放所有标志为文件的进程，每一个进程在proc下有一个名为其进程号的目录。 /tmp 存放临时文件。 /lost+found 恢复文件存放位置，系统崩溃时，可在该目录下找到恢复文件，通常为空。 /usr/include c/c++等开发环境的标准include文件。 /usr/local 安装本地程序的一般默认路径。 /var/cache 应用程序缓存目录。 说明 使用tree命令可以查看系统的文件树形目录结构。 用于intel NUC3815的开发IDE Intel® System Studio IoT Edition和openwrt的交叉编译环境都安装在opt下。 /tmp文件夹是tmpfs类型的文件系统挂载于此，而tmpfs文件系统由内核支持，存在于内存中，由于内存的数据掉电丢失，因此系统重启后，该目录下的文件被清空。openwrt系统下安装软件，通常将软件包放于此目录。 制作根文件系统的方法详见系统移植部分。 参考文档：Linux文件系统以及目录结构简介 文件系统体系结构linux文件系统组件的体系结构如下图所示，该图显示了用户空间和内核空间中与文件系统相关的主要组件之间的关系。 文件系统包括三个部分：虚拟文件系统、cache、真正的文件系统(vfat、Ext3等)。其中有重要作用的是虚拟文件系统(VFS)。它是一种转换机制，仅存在于内存中，不存在外存空间。它的作用如下： 给用户空间的程序提供文件系统接口，通过一套统一的文件IO系统调用，对任意文件操作。 提供抽象功能，通过一些数据结构及其方法向实际的文件系统提供接口，实现不同文件系统在Linux中共存。 注：1. 从调用open、read等函数到设备文件正确返回数据的过程加深理解文件系统体系结构。2. 后期可深入内核中文件系统源代码加深理解文件系统的工作机制。3. 参考文档：Linux 文件系统剖析]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>学习笔记</tag>
        <tag>文件系统</tag>
        <tag>根文件系统</tag>
        <tag>虚拟文件系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux操作系统使用--5shell脚本]]></title>
    <url>%2F2017%2F10%2F23%2FLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8--5shell%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[本篇文章 shell简介 计算机不能直接理解高级语言，而需要将高级语言翻译成可以理解的机器语言。翻译的方式有两种：编译和解释。而shell脚本就是一种解释性语言。 shell脚本对于管理系统任务和其他重复性工作，有很好的表现。例如在/etc/rcx.d/文件夹下有许多脚本文件，用来存储系统配置和建立服务，必要时可以修改。再例如网络配置重启时，使用命令/etc/init.d/networking restart，其中networking就是一个脚本文件。 shell脚本和windows系统下的批处理类似，脚本文件类似于.bat文件。 shell脚本的本质shell命令的有序集合。 shell脚本的目的批量执行shell命令。 shell编程的基本过程 建立shell文件 赋予shell文件执行权限 执行shell文件 注：执行时要加上./才可以。因为标准搜索路径没有当前路径。 shell变量基本概念 shell允许变量，但是不支持变量类型，所有赋值给变量的值都解释为一串字符。不需要声明。 变量赋值不能有空格，否则解析为命令。 通常使用全大写表示shell变量。 变量的调用：在变量前加$，可以使用{}区分其他内容，即${}。 使用unset命令删除变量的赋值，如unset VAR。 用#开头表示注释，通常在脚本的第一行写#! /bin/bash表示用哪种类型shell解释该程序。 变量类型 用户自定义变量 位置变量（命令行参数）$0表示脚本文件名。$1、$2……${10}等分别表示命令行第一个参数，第二个参数……第十个参数。 预定义变量 $# 表示命令行参数个数。 $@或$* 表示所有命令行参数，不包括命令名称。 $? 表示前一个命令的退出状态。 $$ 表示正在执行的进程ID号。 注意预定义变量和makefile的自动变量区分。 环境变量在《Linux操作系统使用–4常用shell命令汇总》中有相关描述，此处不再赘述。补充：使用set命令查看所有本地定义的shell变量，包括环境变量。 使用说明 shell允许变量，但是不支持变量类型，所有赋值给变量的值都解释为一串字符。不需要声明。 变量赋值：VAR=var,不能有空格，否则解析为命令。通常变量使用全大写表示。 变量调用：在变量前加$即可，可以使用{}区分别的内容，即${}，避免歧义。 使用unset命令删除变量的赋值，如unset VAR。也可清除环境变量。 用#开头表示注释，通常在脚本的第一行写“#! /bin/bash”表示用哪种类型shell解释该程序。 常用功能性语句各种括号的比较比如[[“$i” =~ “.sh”]] 判断是否包含.sh后缀 ##readread var1 var2 var3……表示从标准输入读入一行，把读入的第一个单词赋给var1，把第二个单词赋给var2，其余所有的词赋给var3。注：read是阻塞等待输入的。 ##exprexpr用于简单的整数运算，包括加(+)、减(-)、乘(\*)、整除(/)、求模(%)等。注：1. expr和运算符之间有空格，运算符之间有空格。2. expr结果赋值给变量，需要使用命令置换。3. 变量运算时，必须使用expr。不能使用$I=$I+1，而是let i++或者expr 1 + 1。切记shell脚本的目的不是做运算。 ##testtest用来测试字符串、整数、文件属性，每一种有不同的测试操作符。字符串s1=s2,判断s1字符串和s2字符串是否相等。还有s1!=s2、-z s1、-n s1等,详情参阅手册man test。整数a -eq b,判断a和b是否相等。在a和b之间还有-ne、-gt、-ge、-lt、-le等，详情参阅手册。文件属性-d name,判断name是否为一个目录。name前还可以有-e、 -f、 -L、-r、-w、-x、-s等。以及f1 -nt f2、f1 -ot f2等。详情参阅手册。注：1. 可以使用[]代替test，在使用条件语句时常用。注意[]内的内容离左右两个括号都有一个空格。2. 字符串比较，等号和不等号两边的字符串有空格，且字符串要加双引号。3. 使用echo $?查看test结果，真为0,假为1。4. 在系统调用中可以使用stat取得文件属性。 ##echoecho用于向标准输出打印字符串。注:1. 单引号不解析特殊字符，原样输出。双引号解析特殊字符，进行替换输出。因此如需打印变量的值，需使用双引号。2. echo在打印空格时，若加上双引号，每个空格都打印。若不加，两个单词间多个空格只当做分割两个单词的符号，打印一个空格。参考文档：shell脚本中单引号(‘)和双引号(“)的使用区别 ##setset用于跟踪调试shell脚本。set -e表示脚本执行出现了返回值为非零时，整个脚本立即退出。set -x表示set命令之后执行的每一条命令以及加载命令行中的任何参数都会显示出来。 各种括号在shell脚本中，常常会使用各种括号。例如： []单中括号可以替代test。 [[]]双中括号用于字符串模式匹配，例如if [[“$i” =~ “.sh”]] 判断是否包含.sh后缀。 {}花括号和$一起使用，${}表示区分其他字符。{}内还可以加入逗号或者“..”表示扩展，例如{1..5}。 ()圆括号和$一起使用，$()和反引号``作用一样，表示取值。 (())双圆括号用在算术运算中，例如for ((I=0;I&lt;10;I++))循环。 参考文档：shell中各种括号的作用()、(())、[]、[[]]、{} 结构性语句shell脚本中的结构性语句主要是掌握每种语句的书写格式,使用方法类似c语言，但不能照搬，注意shell脚本的主要任务是执行命令集合。 ##条件语句 if 条件 then 命令1 命令2 fi if 条件1 then 命令1 elif 条件2 then 命令2 else 命令N fi 说明： if i&lt;5用shell表示为if (($i&lt;5)), 或者if [ $i -lt 5 ]。 在脚本中常看到if和then写在一行，用分号隔开。例如if [$i -lt 5];then ##多路分支 case 字符串变量 in 模式1） 命令1 ;; 模式2) 命令2 ;; esac说明： case只能识别字符串变量，且字符串要加双引号。 模式可以使用通配符，也可以同时匹配两个模式，使用|单竖线即可，通常最后一个模式使用*通配剩下所有情况。 匹配模式为字符串匹配。 使用;;结束，类似与c语言中的break。 ##循环语句for循环 for 变量名 in 单词表 do 命令表 done 说明： 这里不是用变量名匹配单词表，而是使用单词表里单词的个数作为循环的次数。 for循环适用于循环次数确定。 如果单词表为所有命令行参数，可以省略“in 单词表”。 一定要区分和c语言中的for循环，shell脚本主要是执行命令。 示例：for ((I=0;I&lt;10;I++))，for i in `seq 1 2 10`（表示从1开始到10,间隔为2），for i in {1..5} (表示从1到5,间隔为1)。 while循环 while 命令或表达式 do 命令表 done 说明: while用于循环次数不确定。 死循环为while true。 while语句的退出状态为命令表中最后一条命令的退出状态。##循环控制语句 break n continue说明：break n表示跳出n层循环，而continue表示转到最近一层循环语句的下一轮循环上。 shell函数 定义：把完成固定功能且多次使用的一组命令封装在一个函数里，使用时调用函数名即可。 原则：遵循先定义后调用。 函数只在当前shell起作用，不能输出到子shell中。 定义格式：函数名()或者function 函数名()，没有形参，使用命令行传参。 调用格式：置换的方式赋值给变量或者单独调用。调用时，就相当于使用一个命令。 函数返回：由return返回或者使用echo $?查看结果。 可以在函数中定义局部变量，使用local修饰。 实例分析通过分析三个实践中使用过的shell脚本。进一步理解shell脚本编程。源代码详见gist。 ##automatic mount disk in openwrt 该例子是openwrt系统下自动挂载的脚本。编辑文件为/etc/hotplug.d/block/30-disk-mount。 该段代码主要是case……esac语句的使用。模式有add和remove。 参考文档：1. openwrt hotplug2. OpenWrt中的热拔插Hotplug.d中的脚本 ##mkconfig in uboot source code 该例子是uboot源代码顶层目录下的配置文件，在Makefile中调用，作用是完成编译前针对特定单板的配置工作，编辑文件为u-boot-2013.01/mkconfig。 -a表示&amp;&amp;，-o表示||，在单中括号中使用-a和-o，在双中括号中使用&amp;&amp;和||。 set ${line}表示把line变量设置为当前shell的变量。 shift用来向左移动位置参数。 if [“字符串”]表示判断字符串是否为空。 awk是一个文本分析工具，可以用于字符串匹配分割等。 sed是一个流编辑器，可以用于字符串的替换过滤等。 关于uboot源码的配置编译在系统移植部分再具体分析。 参考文档：1.(三)u-boot2013.01.01 for s5pv210：《mkconfig分析》 2. linux awk命令详解3. Shell脚本学习之sed详解 ##networking service in ubuntu 该例子是Ubuntu系统下重启网络的脚本，编辑文件为/etc/init.d/networking。 该例子中使用一些函数，例如log_warning_msg。定义在/lib/lsb/init-functions文件中。在第19行使用“. /lib/lsb/init-functions”（点号加文件名）表示调用另一个脚本。 该例子中使用&amp;&amp;和||逻辑运算符，利用其短路性质。当&amp;&amp;连接两个表达式时，只有左边表达式为真时计算右边表达式。当||连接两个表达式时，只有左边表达式为假时计算右边表达式。 关于Linux启动脚本和如何编写启动脚本另做研究总结。 参考文档：1. Linux Standard Base2. 分析 shell 中 的 复杂的 &amp;&amp; 和 || 表达式3. 理解Linux系统/etc/init.d目录和/etc/rc.local脚本4. Linux exec与重定向 个人观点shell脚本要掌握什么：基本的编程要会，要会读别人写的脚本。不要将脚本和编译语言混淆，不要总是想用shell实现类似C语言一样的功能，从他的本质 出发，他就是要执行一系列的命令。shell函数暂时用的不是很多在C语言中调用shell脚本，还是有更好的方法？]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>学习笔记</tag>
        <tag>shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux操作系统使用--4常用shell命令汇总]]></title>
    <url>%2F2017%2F10%2F18%2FLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8--4%E5%B8%B8%E7%94%A8shell%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[本篇文章从基本命令、磁盘管理、用户管理、进程管理、文件管理等几个方面总结实践中shell常用命令及其使用场合。并在最后简要介绍环境变量的相关知识：定义、查看、修改。 shell简介基本概念 shell是一个命令行解释器，其功能是将用户命令解析为操作系统所能理解的指令，实现内核和用户的交互。 shell命令包括三个要素，命令名称、选项、参数。命令名称区分大小写。 当多个shell命令写在一行，用分号隔开，顺序执行每一个命令。 当一条shell命令一行写不完，用反斜杠表明。 shell中的特殊字符通配符当用shell命令处理一组文件时，通常使用通配符，提高效率。注意和正则表达式区分。常用于文件名匹配。 * 匹配任意长度字符 ? 匹配一个长度字符 […] 匹配其中指定的一个字符 […-…] 匹配指定的一个字符范围 [^…] 除了指定的字符，其他均可匹配 管道功能：将第一个命令的输出作为第二个命令的输入（单竖线 |）示例：ps -ef | grep xxx 用于杀死某个进程时，先用该命令定位进程号ls | wc -l 统计文件个数 置换功能：将一个命令的输出作为另一个命令的参数（Esc下方的引号）示例：wc -l `ls` 统计每个文件的行数ls `pwd` 显示当前路径文件 重定向功能：分为输入、输出、错误重定向，输出重定向用的多。主要是改变shell命令或者程序默认的标准输入、输出、错误目标。示例：> 新建模式，覆盖原文件>> 追加模式，写在已有内容后注：使用> filename可以新建文件参考文档：shell中的通配符，特殊字符和正则表达式 常用shell命令基本命令这里只简要总结常用shell命令。 whereis xxx 查找二进制文件、可执行文件、帮助文档，源文件、配置文件等。 which xxx 查找可执行文件所在位置。 hostname 查看主机名。 whoami 查看当前用户。 history numberline 显示历史命令，在重启电脑后可以查看，以便执行过去的命令。 wc -c/-w/-l xxx 统计文件字符数/单词数/行数。 参考文档：四个查找命令find,locate,whereis,which的区别注：掌握某些命令的选项含义，能够举一反三套用在多个命令中，例如-r表示 recursion递归，-h表示human人类可读。 磁盘管理 df -aTh 查看文件系统空间占用磁盘情况，显示文件格式类型，在清理磁盘时常用。 du -h 查看某个目录/文件所占磁盘空间大小。 dd if=xxx of=xxx bs=xxx count=xxx 块拷贝文件，烧写系统时将镜像拷贝到优盘用到；制作ramdisk文件系统用到。 fdisk 查看硬盘分区及对硬盘进行分区管理。ITOP4412烧写系统用到fdisk -c 0。 mount -t types device mountpoint 将设备文件挂载在某个目录下，openwrt下有手动挂载和自动挂载使用；制作ramdisk文件系统用到。 umount mountpoint 将设备文件卸载。 用户管理 adduser username 添加用户。 passwd username 修改用户的密码。 注：1. 添加一个用户时，系统会将/etc/skel目录下的文件、目录都复制到新用户的主目录下，主要是一些配置文件，如.vimrc、.bashrc等。且会保存在/etc/passwd文件里，一行包含一个账号信息。此外，/etc/group文件记录了组的名称和组员列表。2. 如果忘记密码，可以使用启动界面进入Recovery Mode，以root身份修改其他用户密码。也可以使用passwd直接修改其他用户密码，不必输入旧密码。 进程管理 ps aux 查看进程，侧重查看进程的CPU占用率和内存占用率。 ps -ef 查看进程，侧重查看进程的父进程ID和完整的COMMAND命令。 pstree 以树状形式显示进程。 注：1. 其余关于进程的状态等知识点另起专题研究。2. ps命令经常搭配grep命令，关注感兴趣的进程。 文件管理文件及文件夹 pwd 查看当前路径，在需要粘贴绝对路径时使用该命令。 file xxx 查看文件类型。 rm -rf 强制删除，包括文件夹。小心使用该命令，尤其是root用户。一般不使用rmdir，该命令要求必须为空文件夹。 mkdir -p dir1/dir2 创建多级目录。 head -num xxx 显示文件前num行内容，通常搭配其他命令结合管道使用。 tail -num xxx 显示文件后num行内容。 grep pattern file 查找字符串，格式支持正则表达式。 find path -name “xxx” 查找文件,支持通配符*和?。 diff a b 比较a和b两个文件。 创建链接 ln target link_name 创建硬链接，通过每个文件的iNode建立，不能跨越文件系统。会在选定位置生成一个和源文件大小相同的文件。 ln -s target link_name 创建软链接（符号链接），利用文件路径名建立，使用绝对路径，可以跨越文件系统。实践中使用较多。不会重复占用磁盘空间。 压缩与解压 tar -cvjf xxx.tar.bz directoryname 压缩为bz格式。 tar -cvzf xxx.tar.gz directoryname 压缩为gz格式。 zip xxx.zip directoryname 压缩为zip格式。 tar -xvjf xxx.tar.bz 解压bz格式。 tar -xvzf xxx.tar.gz 解压gz格式。 unzip xxx.zip 解压zip格式。 注：1. iNode是检索i节点表的下标，i节点中存放有文件的状态信息。2. 修改硬链接文件名，链接仍然有效，而软链接断开连接。对于已存在的链接执行移动或删除命令，可能会导致链接断开。如果删除后，建立同名文件，软链接将恢复，但硬链接不再有效。 网络管理网络管理主要是配置上网。临时生效使用命令配置，永久生效编辑配置文件。关于网络的其他基础知识和常用的命令另起专题研究。 ifconfig 查看网络。 ifconfig eth1 192.168.1.126 netmask 255.255.255.0 配置IP和子网掩码。 Ubuntu/Raspbian网卡配置文件：/etc/network/interfacesdns配置文件：/etc/resolv.conf重启生效 ：sudo /etc/init.d/networking restart openwrt网卡配置文件：/etc/config/network重启生效：/etc/init.d/network reload 注：1. 如果ping不通域名网址，可能需要修改dns配置文件。2. resolv.conf文件在重启后被清空，需要再次配置。 环境变量环境变量是指用户运行环境的参数集合。每一个用户都有其专门的运行环境。用户可以对运行环境进行定制，即修改系统环境变量。环境变量的书写为 环境变量名=内容1：内容2。使用环境变量的场合有： 安装软件，配置路径环境变量，以便全局使用。 切换用户时，通常带上环境变量和工作目录，确保软件的正常使用，如su - root。常见的环境变量 PATH 系统路径 HOME 系统家目录 HISTSIZE 保存历史命令记录的条数 LOGNAME 当前用户的登录名 HOSTNAME 主机名称 SHELL 当前用户用的哪种shell查看/设置环境变量 env 查看所有环境变量。 echo $environmentVariable 查看某一环境变量的内容。 export PATH=/home/youbo:$PATH 临时添加环境变量，只对当前终端有效。 如果想要永久性修改环境变量，则需要修改配置文件。 /etc/profile 系统级环境变量 e.g:安装java和tomcat /etc/bash.bashrc 系统级bashrc e.g:安装openwrt交叉编译环境 /home/xxx/.bashrc 用户级环境变量 e.g:修改HISTSIZE 注：修改完配置文件后，需要使用source命令使其生效，不必重启参考文档：Linux环境变量种类、文件、设置]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>学习笔记</tag>
        <tag>shell命令</tag>
        <tag>环境变量</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux操作系统使用--3软件包管理]]></title>
    <url>%2F2017%2F10%2F15%2FLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8--3%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[本篇文章围绕Linux平台下软件包管理问题，首先介绍deb软件包和rpm软件包两种常用的软件包管理机制，重点介绍deb软件包的dpkg命令和apt原理，简述rpm软件包的rpm命令和yum工具。然后归纳在实践中使用的除上述两种软件包管理之外的方法，并结合所使用的硬件平台给出一些具体的软件包安装实例说明。 软件包管理机制定义把应用程序的二进制文件、配置文档、man/info帮助页面等文件合并打包在一个文件中，使用软件包管理器操作软件包，完成获取、安装、卸载、查询等操作。 主要功能安装、卸载、查询、升级、校验等。 软件包管理是在工作中必做的一项任务，但Linux系统下的软件管理和Windows下软件管理截然不同，因此需要了解Linux系统软件管理的原理、方法并熟练使用。通常有两类软件包管理机制：Debian系统的deb软件包(.deb)管理和Redhat系统的rpm软件包(.rpm)管理。 关于两种软件包管理机制的重要说明： 原理十分类似，命令有所区别，掌握其中一种，其余的有需要时再查询资料。 由Debian或者Redhat衍生出来的Linux系统必然使用与之相关的软件包管理机制。 deb软件包deb软件包管理有两种方式：dpkg本地安装和apt在线安装。dpkg安装方式适用于deb软件包已经下载到本地时进行。而APT工具适合联网时安装使用。 dpkg本地安装常用的命令有以下几个： - dpkg -i xxx.deb 安装软件 - dpkg -r xxx 移除软件 - dpkg -P xxx 移除软件和配置文件 - dpkg -l 列出已安装软件清单 - dpkg -s xxx 显示某个软件安装情况 apt在线安装定义APT是Ubuntu Linux中功能最强大的命令行软件包管理工具，用于获取、安装、编译、卸载、查询deb软件包和检查软件包依赖关系。它是一组命令，包括apt-get、apt-cache、apt-proxy、apt-show-versions、apt-config、apt-cdrom等。其中最常用的apt-get。 原理1.配置软件源各种软件包存放在软件仓库中，软件仓库置于镜像服务器中，在/etc/apt/sources.list软件源配置文件中列出最合适访问的镜像站点。该文件可以直接编辑修改。 在更新源或者添加源时，修改sources.list文件，需要了解其配置项的书写格式，可参考以下文档。另外，直接访问镜像站点查看各个文件夹也有助于进一步了解APT安装软件的原理。参考文档：《嵌入式操作系统Linux篇》3.2.1节debian软件源source.list文件格式说明apt系统中sources.list文件的解析 2.刷新软件源使用apt-get update命令，从/etc/apt/sources.list文件中的每一个配置项下载软件包列表，即建立索引文件，存放在/var/lib/apt/lists目录下。 3.安装软件包使用apt-get install xxx命令，会执行以下几个步骤： 本地扫描软件包列表(/var/lib/apt/lists目录)找到软件包。 检查依赖关系，找到支持软件运行的所有软件包。 从软件源指向的镜像站点下载软件包，存放于var/cache/apt/archives目录。 解压软件包，自动完成应用程序的安装配置。 注：1. apt-get install执行时的打印信息就是其步骤过程2. apt的cron脚本会限制var/cache/apt/archives目录的存储空间和其中文件的存放时间 特点相比于dpkg，APT软件包管理的两个特点是： 检查和修复软件包的依赖关系 需要使用Internet网络获取软件包 apt-get常用命令如下： - apt-get update 下载更新软件包列表信息 - apt-get upgrade 软件包升级为最新版本 - apt-get install xxx 安装软件 - apt-get --reinstall install xxx 重新安装软件 - apt-get check 检查是否有损坏的依赖 - apt-get -f install 修复软件包依赖问题 - apt-get remove xxx 卸载软件 - apt-get --purge remove xxx 完全卸载软件 - apt-get autoremove 将不满足依赖关系的软件包自动卸载 - apt-get clean 删除缓存区所有已下载的包文件 - apt-get autoclean 删除缓存区老版本已下载的包文件 注：apt-get autoclean在释放磁盘时会用到 apt-cache常用命令如下： - apt-cache show xxx 获取二进制软件包详细描述信息 - apt-cache search xxx 根据正则表达式检索软件包 - apt-cache depends xxx 查询该软件包的依赖信息 - apt-cache rdepends xxx 查询所有依赖该软件包的软件包 - apt-cache policy xxx 查询软件包安装状态 rpm软件包rpm软件包管理是另外一种软件包管理机制，和deb功能十分相似。在此不再赘述，有需要时请查阅参考资料。 rpm本地安装rpm的功能类似于dpkg yum在线安装yum功能类似于apt，也有相应的配置文件/etc/yum.conf，/etc/yum.repos.d/目录，数据库目录/var/lib/rpm/等。 rpm和yum使用详情，参考linux软件包管理之一（rpm包管理）deb和rpm软件包管理命令对比，参考Linux软件包管理 应用实例值得注意的是，上述两种软件包管理机制适用的Linux平台为Debian和Redhat系统及它们衍生的Linux系统，而对于嵌入式Linux安装软件又有其各自的特殊之处。另外，基于Linux开源的思想，还有一种特别的软件安装方法，即源码安装。 因此，在实践中，有两个方面需要考虑。第一，Linux平台有哪几种软件安装方法可供选择。第二，具体在哪种Linux平台上安装软件，需要注意什么问题。 Linux平台下安装软件的几种方式 使用dpkg、rpm等底层工具安装需要将软件包下载到本地后，再使用命令安装。 使用apt、yum等上层工具安装联网安装，自动检查依赖关系。 源代码编译安装第三方开源软件通用的安装方法，通常经历：下载--解压--./configure--make--make install等步骤。不同的软件以及不同的安装平台具体细节有差别，该方法可做专题研究，尤其是在嵌入式Linux平台移植，可做总结。 其他除了以上安装方法，有的软件提供安装脚本，直接运行即可。还有其他方法参考以下文档。 参考文档：汇总linux下安装软件的几种方式 实践中各平台的操作系统在实践中我使用了四个硬件平台，关于其详细介绍参考嵌入式学习笔记--前言，在此不再赘述。使用cat /proc/version命令或者cat /etc/issue命令查看各平台的操作系统详细信息。总结如下： - 树莓派3 B：Raspbian GNU/Linux 8 - JS991开发板：openwrt - Intel NUC DE3815TYKHE：Wind River Linux 7.0.0.13 - IOT4412/FS4412开发板：Linux version 3.0.15 实例注意事项总结树莓派/Ubuntu说明 树莓派和Ubuntu都基于Debian系统，因此安装软件首选apt工具。 首先尝试apt-cache search xxx 和 apt-get install xxx。 若提供该软件的软件源，则需要使用apt-key命令导入GPG密钥；配置软件源文件，下载至/etc/apt/sources.list.d/或手动创建编辑；再apt-get update和 apt-get install xxx。 对于ppa个人软件包，使用add-apt-repository命令添加软件源，再apt-get update和 apt-get install xxx。 使用git clone、wget等方法下载安装包，使用提供的脚本安装或者编译源码安装。 实践example Ubuntu下安装mosquitto服务器进行mqtt通信实验 Ubuntu下安装Tomcat web应用服务器进行Java后台开发实验 Ubuntu下安装docker，Intel® System Studio IoT Edition进行Intel网关开发 Ubuntu下安装gsoap进行onvif协议开发 树莓派下安装FFmpeg进行视频推流实验 树莓派下安装node、npm，利用AWS IOT JavaScript SDK进行树莓派连接AWS云实验 树莓派下安装Azure IOT开发包进行树莓派连接Azure云实验 注：有的软件安装涉及环境变量配置，和Windows下类似 JS991开发板说明 openwrt系统下软件包管理工具为opkg,通常使用opkg install xxx.ipk。 如果安装失败，提示缺少依赖的库，可以先使用opkg install安装该库或者找到openwrt系统中该动态链接库，将其复制到开发板的/usr/lib下，再安装相关软件。 ipk软件包可以来源于openwrt下载官网，也可以自己制作并在内核中编译生成，具体制作方法另起专题研究。 支持LuCi进行页面可视化安装软件。 参考文档：openwrt安装软件的两个方法 实践example openwrt下移植opencv，进行视频图像处理实验。 Intel NUC DE3815TYKHE说明 wind river Linux系统作为Intel IoT Gateway Software Suite的一部分提供，此处使用的是免费版本Wind River Linux 7.0.0.13。 Wind River Linux 7.0.0.13系统下的软件包后缀为rpm，软件包管理工具为smart update、smart install、smart channel --add等。可能类似rpm软件包管理，具体需深入学习该系统。 若提供软件源，需要使用rpm --import命令导入GPG密钥，然后使用smart channel --add添加软件源，再使用smart update和smart install。 添加软件源镜像所能访问的文件夹需要和操作系统版本保持一致。 支持页面添加源和软件安装。 实践example wind river Linux下安装AWS IOT SDK,进行Intel nuc3815连接AWS云实验 wind river Linux下安装paho.mqtt.c,进行mqtt客户端通信实验。 wind river Linux下安装OpenSSL，用于mqtt安全通信。 声明：文章中涉及的参考文献并不是随意引用，均是经过笔者阅读大量资料筛选后所得，和本文有密切关系，可放心阅读。]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>学习笔记</tag>
        <tag>软件包管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux操作系统使用--2文本编辑器VIM]]></title>
    <url>%2F2017%2F09%2F27%2FLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8--2%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8VIM%2F</url>
    <content type="text"><![CDATA[本篇文章简要叙述文本编辑器VIM的使用，包括VIM的3种模式，常用的功能键，常用的插件配置。同时给出可供参考的IDE，以作扩展学习。 vim编辑器3种模式 命令模式：主要是光标跳转、复制、粘贴、删除。 编辑模式：主要是文字编辑。 底行模式：主要是保存、退出、查找、替换、设置编辑环境。 注：三种模式叫法可能存在差异，理解每个模式下的功能即可 常用功能键与快捷键这里只列举常用的一些功能键和快捷键。 多窗口与多标签 新窗口 Ctrl+shift+n 新标签 Ctrl+shift+t 跳转 跳转到第n行 ngg 查找字符串 正向查找 /str 跳到下一处 n 跳到上一处 N 反向查找 ?str 替换字符串 m行到n行的str1替换为str2 ：m,ns/str1/str2/g 全文str1替换为str2 ：%s/str1/str2/g注：最后的g表示一行中所有匹配的字符串，不加则只替换第一处 撤销与反撤销 撤销 u 反撤销 Ctrl+r 重复上一修改正文的操作 .(点号) 显示行号 :set number 分屏 竖分屏 :vsp filename 横分屏 :sp filename 比较两个文件 未打开文件时 vimdiff a.c b.c 打开a.c时，和b.c比较 :vert diffsplit b.c 参考文档：Vim入门基础 配置文件与插件网上有许多关于VIM配置的说明，我认为最重要的是知道自己要做什么，而不是盲目的使用教程做复杂的配置。 作为新手，我主要用vim进行C语言开发，我常用以下功能。 - 查看定义(宏、变量、函数名等) - 符号一览(宏、变量、函数名等) - 查看文件目录 - 代码补全 因此需要下载相关插件，并编辑配置文件，以期实现以上功能。其中插件下载后存放于~/.vim文件夹，配置文件为~/.vimrc，当前用户有效。 ctags插件实现查看定义使用步骤 1. 在源码目录下执行ctags -R，生成tags文件 2. 在.vimrc文件中添加:set tags +=源码路径/tags 3. 跳转定义使用Ctrl+] 4. 返回使用Ctrl+t 注：程序修改后，需重新运行ctags -R taglist插件实现符号一览使用步骤 1. 前提：ctags已经打好标签 2. 打开taglist窗口使用:Tlist 3. 光标选择符号，按enter键跳转到定义 4. 光标选择符号，按空格键，在底行显示tag的完整表达 netrw、WinManager插件实现查看文件目录使用步骤 1. 注：netrw已随vim安装，无需下载 2. WinManager的作用是组合netrw窗口和taglist窗口 3. 打开窗口使用wm,关闭窗口再次使用wm 4. 光标选择文件或文件夹，按enter键进入 5. 返回上级目录使用-键 new-omni-completion、SuperTab插件实现自动补全使用步骤 1. 输入几个单词后，按下Tab键进行选择 注：程序修改后，需重新运行ctags -R 参考文档：手把手教你把Vim改装成一个IDE编程环境(图文) IDE编程环境除了VIM编辑器，还有许多集成开发环境可供选择。比如以下两种。 eclipse CDT QT creator 在实践中，我在Ubuntu16.04上安装过Intel® System Studio IoT Edition(linux版)开发Intel NUC DE3815网关的C语言程序，该IDE是基于eclipse的。同时，也使用过eclipse for ARM(windows 32版)开发FS4412裸板的汇编语言程序，并未做深入研究。 个人观点我认为，IDE的使用原理和vim + Makefile + gcc的方式一致，只是在交叉编译环境配置和可视化编程等方面有所不同。 关于vim的高级配置以及IDE的使用，待基础技能熟悉后，视情况再做深入讨论。]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>学习笔记</tag>
        <tag>VIM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux操作系统使用--1基本概念]]></title>
    <url>%2F2017%2F09%2F26%2FLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8--1%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[本篇文章简要叙述嵌入式Linux中的基本概念：嵌入式系统的定义、Linux的发展、Linux操作系统的组成以及Linux作为嵌入式操作系统的优缺点，以期对嵌入式Linux有一个大致的了解。 嵌入式系统定义嵌入式系统是以应用为中心，以计算机技术为基础，软硬件可裁剪，对可靠性、成本、功耗、功能、体积有严格要求的专用计算机系统。 Unix家庭树Linux是类Unix系统，通常所谓的Linux系统全称是GNU/Linux。Unix家庭树如下图所示，了解GNU/Linux所在位置。 此外，与GNU/Linux和BSD家族系统有密切关系的是GPL、BSD软件许可协议。关于常见的开源软件许可协议可做专题分析。 Linux操作系统组件Linux操作系统主要由四部分组成：Linux内核、shell、文件系统和应用程序。 Linux内核内核是操作系统的核心，包括设备驱动、内存管理、进程管理、文件系统 、网络管理和系统调用接口。 shellshell是一个命令解释器，它是Linux内核外层的保护工具，完成用户和内核之间的交互。常用的版本为BASH。 文件系统文件系统是文件存放在磁盘等存储介质上的一种组织方式。Linux操作系统中将文件系统组织为一个层次化的树形结构。 个人观点：Linux下一切皆文件，而通信的本质我认为就是文件的读写。 应用程序 参考文档：Linux系统结构 详解 Linux作为嵌入式操作系统的优缺点优点- 低成本开发：开源且免费使用。 - 适用于多种硬件平台：x86、ARM、MIPS、PowerPC等。 - 内核可定制：模块的插入或移除机制。 - 性能优异：占用资源少、运行稳定、速度快。 - 良好的网络支持：实现了TCP/IP协议栈。 缺点- Linux对硬件有一定要求，而嵌入式硬件资源通常有限。 - Linux结构体系复杂，代码量大。 - 产品化时，遇到问题需要自行解决。 - 产品化时，移植优化工作量大。]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>学习笔记</tag>
        <tag>unix家庭树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[嵌入式Linux学习路线]]></title>
    <url>%2F2017%2F09%2F10%2F%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%2F</url>
    <content type="text"><![CDATA[概述本篇文章简要说明嵌入式Linux的学习路线，后续系列文章将按照本篇所述内容进行展开。 嵌入式Linux开发基础- Linux操作系统使用 - C语言高级编程 - 数据结构 嵌入式Linux应用层开发- 文件I/O与系统I/O - 进程和线程 - 网络编程 嵌入式Linux底层开发- ARM处理器编程 - ARM硬件接口编程 - 系统移植 - 设备驱动 - Android底层驱动 嵌入式系统项目实战- 电子词典 - 仓储物联系统]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>学习笔记</tag>
        <tag>学习路线</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[嵌入式学习笔记--前言]]></title>
    <url>%2F2017%2F09%2F08%2F%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E5%89%8D%E8%A8%80%2F</url>
    <content type="text"><![CDATA[写在前面的话动手写博客前，我一直在思考：博客……写点啥，为了啥，有意义么。第一次写博客，难免有些紧张和忐忑。 我从2017年2月到9月系统的学习了嵌入式Linux的相关知识，包括嵌入式Linux应用层和底层开发等。另外，从去年9月工作以来，我在工作项目中也接触了几款嵌入式设备。因此，我希望借写博客开启嵌入式小白的学习成长之旅。 对于开篇的问题，有以下几点说明： 1. 总结的首要目的是梳理知识点，巩固加深理解，熟练掌握开发技能。 2. 总结的内容为嵌入式Linux重点知识整理，掺杂日常实践中的问题分析。 3. 最后，博客不仅分享的是学习资料，也是笔者的学习心得，而后者是不可复制的。我想，这就是最大的意义所在。此外，若这些短文能够带给您一点帮助或启发，那将是我莫大的荣幸。 嵌入式平台树莓派3 B SoC： BCM2837 CPU： ARM Cortex-A53 1.2GHz 四核 GPU： Broadcom VideoCore IV, OpenGL ES 2.0, 1080p 30 h.264/MPEG-4 AVC 高清解码器 内存： 1GB 外设： WiFi、蓝牙4.1、10/100网口、USB2.0*4、microSD、HDMI、3.5mm音频插孔、CSI摄像头接口、DSI显示接口、40pin扩展GPIO OS： Debian GNU/Linux、Fedora、Arch Linux、RISC OS、Windows10、Snappy Ubuntu Core JS9331开发板 SoC： Atheros AR9331 CPU： AR9331 MIPS 24K 400MHz 内存： 64MB DDR2 SDRAM 外存： 8MB/16MB SPI flash 外设： WiFi、10/100网口*2、USB2.0*2、TTL/RS232串口、USB mini串口、LED*4、key*4、板载温度传感器、红外发送接收、5pin扩展GPIO OS： openwrt Intel NUC DE3815TYKHE套件 CPU：Intel x86 Atom E3815 1.4GHz 单核 内存：单条SO-DIMM内存插槽(最大容量8GB) DDR3 缓存：512KB 外存：4GB eMMC闪存、2.5寸SATA硬盘位 外设：半长式mini PCI-E扩展插槽（无线网卡）、10/100/1000网口，USB 3.0、USB 2.0*2、VGA、HDMI、音频插孔 OS：Intel IoT Gateway Software Suite、Ubuntu 16.04 LTS、Wind River Pulsar Linux IOT4412/FS4412开发板 SOC： 三星Exynos4412 CPU： ARM Cortex-A9 1.4GHz 四核 内存： 1GB DDR3 外存： 4GB eMMC 外设： 20针WiFi接口、microSD、USB2.0*2、USB OTG、10/100网口、音频插孔、串口*2、key*5、20PIN扩展GPIO、20针camera接口、HDMI、LVDS_LCD*2、RGB_LCD OS： Android4.2、Linux-QT、Ubuntu 注：此处以IOT4412说明，FS4412与之类似，外设稍有差别 附：uname -a命令结果- 树莓派3 B： Linux raspberrypi 4.9.35-v7+ #1014 SMP Fri Jun 30 14:47:43 BST 2017 armv7l GNU/Linux - JS991开发板： Linux JoySince 3.10.49 #10 Fri Jul 21 18:31:20 CST 2017 mips GNU/Linux - Intel NUC DE3815TYKHE Linux WR-IDP-42C1 3.14.58_IDP-XT_3.1-WR7.0.0.13_idp #1 SMP PREEMPT Tue Jun 7 16:52:19 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux - IOT4412/FS4412开发板 Linux iTOP-4412 3.0.15 #3 SMP PREEMPT Thu Apr 2 18:49:01 PDT 2015 armv7l GNU/Linux]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>学习笔记</tag>
        <tag>嵌入式硬件平台</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js升级]]></title>
    <url>%2F2017%2F07%2F15%2FNode.js%E5%8D%87%E7%BA%A7%2F</url>
    <content type="text"><![CDATA[Node.js版本更新很频繁，由0.1x版本跃升至4.x乃至目前最新的8.x版本，升级Node.js很有必要 查看Node版本 1$ node -v 安装n模块 1$ npm install -g n 查看所有node版本 1$ n ls 升级Node 12$ n 4.4.0（版本号） # 升级到指定版本$ n stable # 升级最新的稳定版本]]></content>
      <categories>
        <category>日常case</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Git 搭建一个个人博客]]></title>
    <url>%2F2017%2F07%2F04%2FHexo-Git-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[使用Github Pages搭建个人网站 Github Pages是GitHub免费提供给开发者的一款托管个人网站的产品，首先需要创建一个GitHub账号 在GitHub创建一个仓库：username/username.github.io，username是你的账户名，这是特殊的命名约定 在此仓库提交一个index.html文件，网站内容是在master分支下的 访问http://username.github.io，就能看到自己的网站了 绑定独立域名 如果你有自己的域名的话，在之前的仓库点开设置(Settings)，找到GitHub Pages，在Custom domain添加自己的域名，保存(Save)即可 在你的域名注册提供商那里配置DNS解析，获取GitHub的IP地址，添加A记录即可 使用Hexo搭建博客 前提已安装Node.js和Git 安装Hexo 1$ npm install -g hexo-cli 建站 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 安装 hexo-server 1$ npm install hexo-server --save 生成静态文件 1$ hexo generate # 或者 hexo g 启动本地服务 1$ hexo server # 或者 hexo s 查看结果访问http://localhost:4000/，已经可以看到一篇内置的blog了，Hexo使用Markdown解析文章 部署Hexo到Github Pages 安装hexo-deployer-git 1$ npm install hexo-deployer-git --save 修改配置文件_config.xml注：配置文件中，冒号后面一定要加空格 1234deploy: type: git repo: git@github.com:username/username.github.io.git branch: master 执行部署 1$ hexo deploy # 或者 hexo d 使用git部署将我们之前创建的repo克隆到本地，将hexo generate生成public文件夹下的内容copy到本地repo，然后使用git commit提交代码，最后push到远程repo的master branch上即可 查看结果访问http://username.github.io，能看到Hexo内置的blog已经发布到自己的网站了 使用独立域名 123$ cd source/$ touch CNAME$ vim CNAME # 输入你的域名 Hexo主题Next及常用第三方服务 Next主题Hexo支持更换多种主题，本站所用主题是：Next，将喜欢的主题放在themes文件夹内，并修改_config.yml内的theme设定，即可切换主题 1theme: next # Hexo默认主题是landscape 标签与分类确认站点配置文件以及主题配置文件里开启响应设置，新建标签和分类页面内容，在新发布的blog首部设置自定义标签和分类即可 1234567891011121314151617181920212223# 站点配置文件tag_dir: tagscategory_dir: categories # 主题配置文件tags: /tagscategories: /categories # 新建source/tags/index.mdtitle: tagsdate: 2015-10-20 06:49:50type: &quot;tags&quot;comments: false # 新建source/categories/index.mdtitle: categoriesdate: 2015-10-20 06:49:50type: &quot;categories&quot;comments: false # 新发布的blog首部设置categories: 类别tags: [标签1,标签2,标签3] 网站统计百度统计登录百度统计，定位到站点的代码获取页面，复制 hm.js? 后面那串统计脚本 id，修改主题配置文件内的字段 baidu_analytics，值设置成你的百度统计脚本id 12# Baidu Analytics IDbaidu_analytics: **** 阅读次数统计LeanCloud注册LeanCloud帐号，创建一个应用，在应用的配置界面创建Class（名字必须为Counter），由于LeanCloud升级了默认的ACL权限，如果你想避免后续因为权限的问题导致次数统计显示不正常，建议在此处选择无限制。在应用Key界面拿到AppID以及AppKey这两个参数，修改主题配置文件内对应的的字段即可。另外，建议开启Web安全选项，在安全中心的Web安全域名中填入我们自己的博客域名，来确保数据调用的安全 1234# leancloud_visitors:enable: trueapp_id: ****app_key: **** 评论系统HyperComments首先需要在文章首部开启评论，Next官网提供的DISQUS、多说、网易云跟帖等都已经停止服务了，只好使用HyperComments，创建一个免费应用即可，拿到WIDGET-CODE，修改主题配置文件内对应的的字段即可 123456# 文章首部设置comments: true # 主题配置文件# Hypercommentshypercomments_id: **** 分享系统jiathis注册jiathis账号，获取uid后更改配置文件内对应的的字段即可 123jiathis: enable: false id: 2139015 搜索服务LocalSearch安装 hexo-generator-searchdb，编辑站点配置文件和主题配置文件 12345678910111213# 安装 hexo-generator-searchdb$ npm install hexo-generator-searchdb --save # 站点配置search: path: search.xml field: post format: html limit: 10000 # 主题配置local_search: enable: true 打赏服务编辑主题配置文件，添加comment和支付二维码即可 1234# 打赏配置 可自己添加reward_comment: 您的支持将鼓励我继续创作！wechatpay: # 微信收款二维码alipay: # 支付宝收款二维码 腾讯公益404页面寻找丢失儿童，让大家一起关注此项公益事业！新建404.html页面，放到主题的source目录下，内容如下 12345678910111213141516&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="content-type" content="text/html;charset=utf-8;"/&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/&gt; &lt;meta name="robots" content="all"/&gt; &lt;meta name="robots" content="index,follow"/&gt; &lt;link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"&gt;&lt;/head&gt;&lt;body&gt; &lt;script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homePageUrl="/" homePageName="回到我的主页"&gt; &lt;/script&gt; &lt;script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"&gt;&lt;/script&gt; &lt;script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>开源工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>博客</tag>
      </tags>
  </entry>
</search>