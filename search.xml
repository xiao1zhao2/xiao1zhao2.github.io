<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux操作系统使用--2文本编辑器VIM]]></title>
    <url>%2F2017%2F09%2F27%2FLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8--2%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8VIM%2F</url>
    <content type="text"><![CDATA[本篇文章简要叙述文本编辑器VIM的使用，包括VIM的3种模式，常用的功能键，常用的插件配置。同时给出可供参考的IDE，以作扩展学习。 vim编辑器3种模式 命令模式：主要是光标跳转、复制、粘贴、删除。 编辑模式：主要是文字编辑。 底行模式：主要是保存、退出、查找、替换、设置编辑环境。 注：三种模式叫法可能存在差异，理解每个模式下的功能即可 常用功能键与快捷键这里只列举常用的一些功能键和快捷键。 多窗口与多标签 新窗口 Ctrl+shift+n 新标签 Ctrl+shift+t 跳转 跳转到第n行 ngg 查找字符串 正向查找 /str 跳到下一处 n 跳到上一处 N 反向查找 ?str 替换字符串 m行到n行的str1替换为str2 ：m,ns/str1/str2/g 全文str1替换为str2 ：%s/str1/str2/g注：最后的g表示一行中所有匹配的字符串，不加则只替换第一处 撤销与反撤销 撤销 u 反撤销 Ctrl+r 重复上一修改正文的操作 .(点号) 显示行号 :set number 分屏 竖分屏 :vsp filename 横分屏 :sp filename 比较两个文件 未打开文件时 vimdiff a.c b.c 打开a.c时，和b.c比较 :vert diffsplit b.c 参考文档：Vim入门基础 配置文件与插件网上有许多关于VIM配置的说明，我认为最重要的是知道自己要做什么，而不是盲目的使用教程做复杂的配置。 作为新手，我主要用vim进行C语言开发，我常用以下功能。 - 查看定义(宏、变量、函数名等) - 符号一览(宏、变量、函数名等) - 查看文件目录 - 代码补全 因此需要下载相关插件，并编辑配置文件，以期实现以上功能。其中插件下载后存放于~/.vim文件夹，配置文件为~/.vimrc，当前用户有效。 ctags插件实现查看定义使用步骤 1. 在源码目录下执行ctags -R，生成tags文件 2. 在.vimrc文件中添加:set tags +=源码路径/tags 3. 跳转定义使用Ctrl+] 4. 返回使用Ctrl+t 注：程序修改后，需重新运行ctags -R taglist插件实现符号一览使用步骤 1. 前提：ctags已经打好标签 2. 打开taglist窗口使用:Tlist 3. 光标选择符号，按enter键跳转到定义 4. 光标选择符号，按空格键，在底行显示tag的完整表达 netrw、WinManager插件实现查看文件目录使用步骤 1. 注：netrw已随vim安装，无需下载 2. WinManager的作用是组合netrw窗口和taglist窗口 3. 打开窗口使用wm,关闭窗口再次使用wm 4. 光标选择文件或文件夹，按enter键进入 5. 返回上级目录使用-键 new-omni-completion、SuperTab插件实现自动补全使用步骤 1. 输入几个单词后，按下Tab键进行选择 注：程序修改后，需重新运行ctags -R 参考文档：手把手教你把Vim改装成一个IDE编程环境(图文) IDE编程环境除了VIM编辑器，还有许多集成开发环境可供选择。比如以下两种。 eclipse CDT QT creator 在实践中，我在Ubuntu16.04上安装过Intel® System Studio IoT Edition(linux版)开发Intel NUC DE3815网关的C语言程序，该IDE是基于eclipse的。同时，也使用过eclipse for ARM(windows 32版)开发FS4412裸板的汇编语言程序，并未做深入研究。 个人观点我认为，IDE的使用原理和vim + Makefile + gcc的方式一致，只是在交叉编译环境配置和可视化编程等方面有所不同。 关于vim的高级配置以及IDE的使用，待基础技能熟悉后，视情况再做深入讨论。]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux操作系统使用--1基本概念]]></title>
    <url>%2F2017%2F09%2F26%2FLinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8--1%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%2F</url>
    <content type="text"><![CDATA[本篇文章简要叙述嵌入式Linux中的基本概念：嵌入式系统的定义、Linux的发展、Linux操作系统的组成以及Linux作为嵌入式操作系统的优缺点，以期对嵌入式Linux有一个大致的了解。 嵌入式系统定义嵌入式系统是以应用为中心，以计算机技术为基础，软硬件可裁剪，对可靠性、成本、功耗、功能、体积有严格要求的专用计算机系统。 Unix家庭树Linux是类Unix系统，通常所谓的Linux系统全称是GNU/Linux。Unix家庭树如下图所示，了解GNU/Linux所在位置。 此外，与GNU/Linux和BSD家族系统有密切关系的是GPL、BSD软件许可协议。关于常见的开源软件许可协议可做专题分析。 Linux操作系统组件Linux操作系统主要由四部分组成：Linux内核、shell、文件系统和应用程序。 Linux内核内核是操作系统的核心，包括设备驱动、内存管理、进程管理、文件系统 、网络管理和系统调用接口。 shellshell是一个命令解释器，它是Linux内核外层的保护工具，完成用户和内核之间的交互。常用的版本为BASH。 文件系统文件系统是文件存放在磁盘等存储介质上的一种组织方式。Linux操作系统中将文件系统组织为一个层次化的树形结构。 个人观点：Linux下一切皆文件，而通信的本质我认为就是文件的读写。 应用程序 参考文档：Linux系统结构 详解 Linux作为嵌入式操作系统的优缺点优点- 低成本开发：开源且免费使用。 - 适用于多种硬件平台：x86、ARM、MIPS、PowerPC等。 - 内核可定制：模块的插入或移除机制。 - 性能优异：占用资源少、运行稳定、速度快。 - 良好的网络支持：实现了TCP/IP协议栈。 缺点- Linux对硬件有一定要求，而嵌入式硬件资源通常有限。 - Linux结构体系复杂，代码量大。 - 产品化时，遇到问题需要自行解决。 - 产品化时，移植优化工作量大。]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[嵌入式Linux学习路线]]></title>
    <url>%2F2017%2F09%2F10%2F%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%2F</url>
    <content type="text"><![CDATA[概述本篇文章简要说明嵌入式Linux的学习路线，后续系列文章将按照本篇所述内容进行展开。 嵌入式Linux开发基础- Linux操作系统使用 - C语言高级编程 - 数据结构 嵌入式Linux应用层开发- 文件I/O与系统I/O - 进程和线程 - 网络编程 嵌入式Linux底层开发- ARM处理器编程 - ARM硬件接口编程 - 系统移植 - 设备驱动 - Android底层驱动 嵌入式系统项目实战- 电子词典 - 仓储物联系统]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[嵌入式学习笔记--前言]]></title>
    <url>%2F2017%2F09%2F08%2F%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0--%E5%89%8D%E8%A8%80%2F</url>
    <content type="text"><![CDATA[写在前面的话动手写博客前，我一直在思考：博客……写点啥，为了啥，有意义么。第一次写博客，难免有些紧张和忐忑。 我从2017年2月到9月系统的学习了嵌入式Linux的相关知识，包括嵌入式Linux应用层和底层开发等。另外，从去年9月工作以来，我在工作项目中也接触了几款嵌入式设备。因此，我希望借写博客开启嵌入式小白的学习成长之旅。 对于开篇的问题，有以下几点说明： 1. 总结的首要目的是梳理知识点，巩固加深理解，熟练掌握开发技能。 2. 总结的内容为嵌入式Linux重点知识整理，掺杂日常实践中的问题分析。 3. 最后，博客不仅分享的是学习资料，也是笔者的学习心得，而后者是不可复制的。我想，这就是最大的意义所在。此外，若这些短文能够带给您一点帮助或启发，那将是我莫大的荣幸。 嵌入式平台树莓派3 B SoC： BCM2837 CPU： ARM Cortex-A53 1.2GHz 四核 GPU： Broadcom VideoCore IV, OpenGL ES 2.0, 1080p 30 h.264/MPEG-4 AVC 高清解码器 内存： 1GB 外设： WiFi、蓝牙4.1、10/100网口、USB2.0*4、microSD、HDMI、3.5mm音频插孔、CSI摄像头接口、DSI显示接口、40pin扩展GPIO OS： Debian GNU/Linux、Fedora、Arch Linux、RISC OS、Windows10、Snappy Ubuntu Core JS9331开发板 SoC： Atheros AR9331 CPU： AR9331 MIPS 24K 400MHz 内存： 64MB DDR2 SDRAM 外存： 8MB/16MB SPI flash 外设： WiFi、10/100网口*2、USB2.0*2、TTL/RS232串口、USB mini串口、LED*4、key*4、板载温度传感器、红外发送接收、5pin扩展GPIO OS： openwrt Intel NUC DE3815TYKHE套件 CPU：Intel x86 Atom E3815 1.4GHz 单核 内存：单条SO-DIMM内存插槽(最大容量8GB) DDR3 缓存：512KB 外存：4GB eMMC闪存、2.5寸SATA硬盘位 外设：半长式mini PCI-E扩展插槽（无线网卡）、10/100/1000网口，USB 3.0、USB 2.0*2、VGA、HDMI、音频插孔 OS：Intel IoT Gateway Software Suite、Ubuntu 16.04 LTS、Wind River Pulsar Linux IOT4412/FS4412开发板 SOC： 三星Exynos4412 CPU： ARM Cortex-A9 1.4GHz 四核 内存： 1GB DDR3 外存： 4GB eMMC 外设： 20针WiFi接口、microSD、USB2.0*2、USB OTG、10/100网口、音频插孔、串口*2、key*5、20PIN扩展GPIO、20针camera接口、HDMI、LVDS_LCD*2、RGB_LCD OS： Android4.2、Linux-QT、Ubuntu 注：此处以IOT4412说明，FS4412与之类似，外设稍有差别 附：uname -a命令结果- 树莓派3 B： Linux raspberrypi 4.9.35-v7+ #1014 SMP Fri Jun 30 14:47:43 BST 2017 armv7l GNU/Linux - JS991开发板： Linux JoySince 3.10.49 #10 Fri Jul 21 18:31:20 CST 2017 mips GNU/Linux - Intel NUC DE3815TYKHE Linux WR-IDP-42C1 3.14.58_IDP-XT_3.1-WR7.0.0.13_idp #1 SMP PREEMPT Tue Jun 7 16:52:19 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux - IOT4412/FS4412开发板 Linux iTOP-4412 3.0.15 #3 SMP PREEMPT Thu Apr 2 18:49:01 PDT 2015 armv7l GNU/Linux]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js升级]]></title>
    <url>%2F2017%2F07%2F15%2FNode.js%E5%8D%87%E7%BA%A7%2F</url>
    <content type="text"><![CDATA[Node.js版本更新很频繁，由0.1x版本跃升至4.x乃至目前最新的8.x版本，升级Node.js很有必要 查看Node版本 1$ node -v 安装n模块 1$ npm install -g n 查看所有node版本 1$ n ls 升级Node 12$ n 4.4.0（版本号） # 升级到指定版本$ n stable # 升级最新的稳定版本]]></content>
      <categories>
        <category>日常case</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+Git 搭建一个个人博客]]></title>
    <url>%2F2017%2F07%2F04%2FHexo-Git-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[使用Github Pages搭建个人网站 Github Pages是GitHub免费提供给开发者的一款托管个人网站的产品，首先需要创建一个GitHub账号 在GitHub创建一个仓库：username/username.github.io，username是你的账户名，这是特殊的命名约定 在此仓库提交一个index.html文件，网站内容是在master分支下的 访问http://username.github.io，就能看到自己的网站了 绑定独立域名 如果你有自己的域名的话，在之前的仓库点开设置(Settings)，找到GitHub Pages，在Custom domain添加自己的域名，保存(Save)即可 在你的域名注册提供商那里配置DNS解析，获取GitHub的IP地址，添加A记录即可 使用Hexo搭建博客 前提已安装Node.js和Git 安装Hexo 1$ npm install -g hexo-cli 建站 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 安装 hexo-server 1$ npm install hexo-server --save 生成静态文件 1$ hexo generate # 或者 hexo g 启动本地服务 1$ hexo server # 或者 hexo s 查看结果访问http://localhost:4000/，已经可以看到一篇内置的blog了，Hexo使用Markdown解析文章 部署Hexo到Github Pages 安装hexo-deployer-git 1$ npm install hexo-deployer-git --save 修改配置文件_config.xml注：配置文件中，冒号后面一定要加空格 1234deploy: type: git repo: git@github.com:username/username.github.io.git branch: master 执行部署 1$ hexo deploy # 或者 hexo d 使用git部署将我们之前创建的repo克隆到本地，将hexo generate生成public文件夹下的内容copy到本地repo，然后使用git commit提交代码，最后push到远程repo的master branch上即可 查看结果访问http://username.github.io，能看到Hexo内置的blog已经发布到自己的网站了 使用独立域名 123$ cd source/$ touch CNAME$ vim CNAME # 输入你的域名 Hexo主题Next及常用第三方服务 Next主题Hexo支持更换多种主题，本站所用主题是：Next，将喜欢的主题放在themes文件夹内，并修改_config.yml内的theme设定，即可切换主题 1theme: next # Hexo默认主题是landscape 标签与分类确认站点配置文件以及主题配置文件里开启响应设置，新建标签和分类页面内容，在新发布的blog首部设置自定义标签和分类即可 1234567891011121314151617181920212223# 站点配置文件tag_dir: tagscategory_dir: categories # 主题配置文件tags: /tagscategories: /categories # 新建source/tags/index.mdtitle: tagsdate: 2015-10-20 06:49:50type: &quot;tags&quot;comments: false # 新建source/categories/index.mdtitle: categoriesdate: 2015-10-20 06:49:50type: &quot;categories&quot;comments: false # 新发布的blog首部设置categories: 类别tags: [标签1,标签2,标签3] 网站统计百度统计登录百度统计，定位到站点的代码获取页面，复制 hm.js? 后面那串统计脚本 id，修改主题配置文件内的字段 baidu_analytics，值设置成你的百度统计脚本id 12# Baidu Analytics IDbaidu_analytics: **** 阅读次数统计LeanCloud注册LeanCloud帐号，创建一个应用，在应用的配置界面创建Class（名字必须为Counter），由于LeanCloud升级了默认的ACL权限，如果你想避免后续因为权限的问题导致次数统计显示不正常，建议在此处选择无限制。在应用Key界面拿到AppID以及AppKey这两个参数，修改主题配置文件内对应的的字段即可。另外，建议开启Web安全选项，在安全中心的Web安全域名中填入我们自己的博客域名，来确保数据调用的安全 1234# leancloud_visitors:enable: trueapp_id: ****app_key: **** 评论系统HyperComments首先需要在文章首部开启评论，Next官网提供的DISQUS、多说、网易云跟帖等都已经停止服务了，只好使用HyperComments，创建一个免费应用即可，拿到WIDGET-CODE，修改主题配置文件内对应的的字段即可 123456# 文章首部设置comments: true # 主题配置文件# Hypercommentshypercomments_id: **** 分享系统jiathis注册jiathis账号，获取uid后更改配置文件内对应的的字段即可 123jiathis: enable: false id: 2139015 搜索服务LocalSearch安装 hexo-generator-searchdb，编辑站点配置文件和主题配置文件 12345678910111213# 安装 hexo-generator-searchdb$ npm install hexo-generator-searchdb --save # 站点配置search: path: search.xml field: post format: html limit: 10000 # 主题配置local_search: enable: true 打赏服务编辑主题配置文件，添加comment和支付二维码即可 1234# 打赏配置 可自己添加reward_comment: 您的支持将鼓励我继续创作！wechatpay: # 微信收款二维码alipay: # 支付宝收款二维码 腾讯公益404页面寻找丢失儿童，让大家一起关注此项公益事业！新建404.html页面，放到主题的source目录下，内容如下 12345678910111213141516&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="content-type" content="text/html;charset=utf-8;"/&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/&gt; &lt;meta name="robots" content="all"/&gt; &lt;meta name="robots" content="index,follow"/&gt; &lt;link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"&gt;&lt;/head&gt;&lt;body&gt; &lt;script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homePageUrl="/" homePageName="回到我的主页"&gt; &lt;/script&gt; &lt;script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"&gt;&lt;/script&gt; &lt;script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>开源工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>博客</tag>
      </tags>
  </entry>
</search>